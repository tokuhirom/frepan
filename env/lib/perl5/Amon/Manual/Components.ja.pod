=head1 NAME

Amon::Manual::Components.ja - Amon における Component 構成について。

=head1 DESCRIPTION

Amon における各コンポーネントの定義についてここに記す。

=head2 一般的なモジュール

=over 4

=item View

View は $view->make_response(@args) と $view->render(@args); の2つのメ
ソッドを持つクラスです。

$view->render(@args) は、HTML や JSON などのcontent body を描画します。

$view->make_response(@args) は $view->render(@args) を content body を
利用して、レスポンスを構築します。

=item Model

Amon において、モデルとは、POPO(Plain Old Perl Object) のことをさします。
Model は Amon に関する一切の知識を持つべきではありません。

Model はオブジェクトであり、$c->model($name) メソッドによりインスタンス
化されます。

インスタンス化は MyApp::M::Whatever->new($conf) のようにして行われます。
一般的な L<Class::Accessor::Fast>, L<Mouse>, L<Moose> などで構築された
クラスなら、普通に動作するはずです。

DBI や Data::Model など、インスタンスの作成に ->new メソッドを呼びだす
以外の特殊な操作が必要な場合には、Factory を利用してください。

=item Factory

Amon において、Factory は他のクラスのインスタンスを構築するモジュールで
す。

標準では L<Amon::Factory::DBI> と L<Amon::Factory::DataModel> が提供さ
れています。

=item Plugin

Plugin は、フックポイントにフックして処理する、Request, Response,
Context といった各クラスにメソッドをはやす、といったことをするクラスで
す。


   __PACKAGE__->load_plugins(qw/PluginName/);

といった形式で使います。Amon::Plugin::PluginName->init($c) が起動時によ
ばれるので、init メソッドの中に処理を記述してください。


=back

=head2 Web 関連のコンポーネント

=over 4

=item Dispatcher

Dispatcher は、ウェブリクエストを処理するコントローラを決定します。

Dispatcher はインスタンス化され*ません*。必要、ないですよね。

通常、Dispatcher は MyApp::Web::Dispatcher といったネームスペースに配置
されます。M::W::Dispatcher->dispatch($c) という形でメソッドはよびだされ
ます。

=item Controller

リクエストをうけとって、レスポンスを返す人です。Model からデータを出し
入れして、View で結果を描画します。

=back

=cut

